// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JfrogProject
{
    /// <summary>
    /// Provides an Artifactory project resource. This can be used to create and manage Artifactory project, maintain users/groups/roles/repos.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using JfrogProject = Pulumi.JfrogProject;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myproject = new JfrogProject.Project("myproject", new()
    ///     {
    ///         AdminPrivileges = new[]
    ///         {
    ///             new JfrogProject.Inputs.ProjectAdminPrivilegeArgs
    ///             {
    ///                 IndexResources = true,
    ///                 ManageMembers = true,
    ///                 ManageResources = true,
    ///             },
    ///         },
    ///         BlockDeploymentsOnLimit = false,
    ///         Description = "My Project",
    ///         DisplayName = "My Project",
    ///         EmailNotification = true,
    ///         Key = "myproj",
    ///         MaxStorageInGibibytes = 10,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import jfrog-project:index/project:Project myproject myproj
    /// ```
    /// </summary>
    [JfrogProjectResourceType("jfrog-project:index/project:Project")]
    public partial class Project : global::Pulumi.CustomResource
    {
        [Output("adminPrivileges")]
        public Output<ImmutableArray<Outputs.ProjectAdminPrivilege>> AdminPrivileges { get; private set; } = null!;

        /// <summary>
        /// Block deployment of artifacts if storage quota is exceeded.
        /// </summary>
        [Output("blockDeploymentsOnLimit")]
        public Output<bool> BlockDeploymentsOnLimit { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Also known as project name on the UI
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
        /// blocker
        /// </summary>
        [Output("emailNotification")]
        public Output<bool> EmailNotification { get; private set; } = null!;

        /// <summary>
        /// Project group. Element has one to one mapping with the [JFrog Project Groups
        /// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<Outputs.ProjectGroup>> Groups { get; private set; } = null!;

        /// <summary>
        /// The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
        /// Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
        /// for the API.
        /// </summary>
        [Output("maxStorageInGibibytes")]
        public Output<int> MaxStorageInGibibytes { get; private set; } = null!;

        /// <summary>
        /// Member of the project. Element has one to one mapping with the [JFrog Project Users
        /// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
        /// </summary>
        [Output("members")]
        public Output<ImmutableArray<Outputs.ProjectMember>> Members { get; private set; } = null!;

        /// <summary>
        /// (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
        /// `project_key` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
        /// `lifecycle.ignore_changes` in the `jfrog-project.Project` resource to avoid state drift. ```hcl lifecycle {
        /// ignore_changes = [ repos ] } ```
        /// </summary>
        [Output("repos")]
        public Output<ImmutableArray<string>> Repos { get; private set; } = null!;

        /// <summary>
        /// Project role. Element has one to one mapping with the [JFrog Project Roles
        /// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<Outputs.ProjectRole>> Roles { get; private set; } = null!;

        /// <summary>
        /// When set to true, this resource will ignore the `group` attributes and allow users to be managed by
        /// `jfrog-project.Group` resource instead. Default to `true`.
        /// </summary>
        [Output("useProjectGroupResource")]
        public Output<bool> UseProjectGroupResource { get; private set; } = null!;

        /// <summary>
        /// When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by
        /// `jfrog-project.Repository` resource instead. Default to `true`.
        /// </summary>
        [Output("useProjectRepositoryResource")]
        public Output<bool> UseProjectRepositoryResource { get; private set; } = null!;

        /// <summary>
        /// When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `jfrog-project.Role`
        /// resource instead. Default to `true`.
        /// </summary>
        [Output("useProjectRoleResource")]
        public Output<bool> UseProjectRoleResource { get; private set; } = null!;

        /// <summary>
        /// When set to true, this resource will ignore the `member` attributes and allow users to be managed by
        /// `jfrog-project.User` resource instead. Default to `true`.
        /// </summary>
        [Output("useProjectUserResource")]
        public Output<bool> UseProjectUserResource { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs args, CustomResourceOptions? options = null)
            : base("jfrog-project:index/project:Project", name, args ?? new ProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("jfrog-project:index/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : global::Pulumi.ResourceArgs
    {
        [Input("adminPrivileges")]
        private InputList<Inputs.ProjectAdminPrivilegeArgs>? _adminPrivileges;
        public InputList<Inputs.ProjectAdminPrivilegeArgs> AdminPrivileges
        {
            get => _adminPrivileges ?? (_adminPrivileges = new InputList<Inputs.ProjectAdminPrivilegeArgs>());
            set => _adminPrivileges = value;
        }

        /// <summary>
        /// Block deployment of artifacts if storage quota is exceeded.
        /// </summary>
        [Input("blockDeploymentsOnLimit")]
        public Input<bool>? BlockDeploymentsOnLimit { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Also known as project name on the UI
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
        /// blocker
        /// </summary>
        [Input("emailNotification")]
        public Input<bool>? EmailNotification { get; set; }

        [Input("groups")]
        private InputList<Inputs.ProjectGroupArgs>? _groups;

        /// <summary>
        /// Project group. Element has one to one mapping with the [JFrog Project Groups
        /// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
        /// </summary>
        [Obsolete(@"Replaced by `jfrog-project.Group` resource. This should not be used in combination with `jfrog-project.Group` resource. Use `use_project_group_resource` attribute to control which resource manages project roles.")]
        public InputList<Inputs.ProjectGroupArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.ProjectGroupArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
        /// Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
        /// for the API.
        /// </summary>
        [Input("maxStorageInGibibytes")]
        public Input<int>? MaxStorageInGibibytes { get; set; }

        [Input("members")]
        private InputList<Inputs.ProjectMemberArgs>? _members;

        /// <summary>
        /// Member of the project. Element has one to one mapping with the [JFrog Project Users
        /// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
        /// </summary>
        [Obsolete(@"Replaced by `jfrog-project.User` resource. This should not be used in combination with `jfrog-project.User` resource. Use `use_project_user_resource` attribute to control which resource manages project roles.")]
        public InputList<Inputs.ProjectMemberArgs> Members
        {
            get => _members ?? (_members = new InputList<Inputs.ProjectMemberArgs>());
            set => _members = value;
        }

        [Input("repos")]
        private InputList<string>? _repos;

        /// <summary>
        /// (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
        /// `project_key` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
        /// `lifecycle.ignore_changes` in the `jfrog-project.Project` resource to avoid state drift. ```hcl lifecycle {
        /// ignore_changes = [ repos ] } ```
        /// </summary>
        [Obsolete(@"Replaced by `jfrog-project.Repository` resource. This should not be used in combination with `jfrog-project.Repository` resource. Use `use_project_repository_resource` attribute to control which resource manages project repositories.")]
        public InputList<string> Repos
        {
            get => _repos ?? (_repos = new InputList<string>());
            set => _repos = value;
        }

        [Input("roles")]
        private InputList<Inputs.ProjectRoleArgs>? _roles;

        /// <summary>
        /// Project role. Element has one to one mapping with the [JFrog Project Roles
        /// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
        /// </summary>
        [Obsolete(@"Replaced by `jfrog-project.Role` resource. This should not be used in combination with `jfrog-project.Role` resource. Use `use_project_role_resource` attribute to control which resource manages project roles.")]
        public InputList<Inputs.ProjectRoleArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.ProjectRoleArgs>());
            set => _roles = value;
        }

        /// <summary>
        /// When set to true, this resource will ignore the `group` attributes and allow users to be managed by
        /// `jfrog-project.Group` resource instead. Default to `true`.
        /// </summary>
        [Input("useProjectGroupResource")]
        public Input<bool>? UseProjectGroupResource { get; set; }

        /// <summary>
        /// When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by
        /// `jfrog-project.Repository` resource instead. Default to `true`.
        /// </summary>
        [Input("useProjectRepositoryResource")]
        public Input<bool>? UseProjectRepositoryResource { get; set; }

        /// <summary>
        /// When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `jfrog-project.Role`
        /// resource instead. Default to `true`.
        /// </summary>
        [Input("useProjectRoleResource")]
        public Input<bool>? UseProjectRoleResource { get; set; }

        /// <summary>
        /// When set to true, this resource will ignore the `member` attributes and allow users to be managed by
        /// `jfrog-project.User` resource instead. Default to `true`.
        /// </summary>
        [Input("useProjectUserResource")]
        public Input<bool>? UseProjectUserResource { get; set; }

        public ProjectArgs()
        {
        }
        public static new ProjectArgs Empty => new ProjectArgs();
    }

    public sealed class ProjectState : global::Pulumi.ResourceArgs
    {
        [Input("adminPrivileges")]
        private InputList<Inputs.ProjectAdminPrivilegeGetArgs>? _adminPrivileges;
        public InputList<Inputs.ProjectAdminPrivilegeGetArgs> AdminPrivileges
        {
            get => _adminPrivileges ?? (_adminPrivileges = new InputList<Inputs.ProjectAdminPrivilegeGetArgs>());
            set => _adminPrivileges = value;
        }

        /// <summary>
        /// Block deployment of artifacts if storage quota is exceeded.
        /// </summary>
        [Input("blockDeploymentsOnLimit")]
        public Input<bool>? BlockDeploymentsOnLimit { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Also known as project name on the UI
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
        /// blocker
        /// </summary>
        [Input("emailNotification")]
        public Input<bool>? EmailNotification { get; set; }

        [Input("groups")]
        private InputList<Inputs.ProjectGroupGetArgs>? _groups;

        /// <summary>
        /// Project group. Element has one to one mapping with the [JFrog Project Groups
        /// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
        /// </summary>
        [Obsolete(@"Replaced by `jfrog-project.Group` resource. This should not be used in combination with `jfrog-project.Group` resource. Use `use_project_group_resource` attribute to control which resource manages project roles.")]
        public InputList<Inputs.ProjectGroupGetArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.ProjectGroupGetArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
        /// Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
        /// for the API.
        /// </summary>
        [Input("maxStorageInGibibytes")]
        public Input<int>? MaxStorageInGibibytes { get; set; }

        [Input("members")]
        private InputList<Inputs.ProjectMemberGetArgs>? _members;

        /// <summary>
        /// Member of the project. Element has one to one mapping with the [JFrog Project Users
        /// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
        /// </summary>
        [Obsolete(@"Replaced by `jfrog-project.User` resource. This should not be used in combination with `jfrog-project.User` resource. Use `use_project_user_resource` attribute to control which resource manages project roles.")]
        public InputList<Inputs.ProjectMemberGetArgs> Members
        {
            get => _members ?? (_members = new InputList<Inputs.ProjectMemberGetArgs>());
            set => _members = value;
        }

        [Input("repos")]
        private InputList<string>? _repos;

        /// <summary>
        /// (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
        /// `project_key` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
        /// `lifecycle.ignore_changes` in the `jfrog-project.Project` resource to avoid state drift. ```hcl lifecycle {
        /// ignore_changes = [ repos ] } ```
        /// </summary>
        [Obsolete(@"Replaced by `jfrog-project.Repository` resource. This should not be used in combination with `jfrog-project.Repository` resource. Use `use_project_repository_resource` attribute to control which resource manages project repositories.")]
        public InputList<string> Repos
        {
            get => _repos ?? (_repos = new InputList<string>());
            set => _repos = value;
        }

        [Input("roles")]
        private InputList<Inputs.ProjectRoleGetArgs>? _roles;

        /// <summary>
        /// Project role. Element has one to one mapping with the [JFrog Project Roles
        /// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
        /// </summary>
        [Obsolete(@"Replaced by `jfrog-project.Role` resource. This should not be used in combination with `jfrog-project.Role` resource. Use `use_project_role_resource` attribute to control which resource manages project roles.")]
        public InputList<Inputs.ProjectRoleGetArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.ProjectRoleGetArgs>());
            set => _roles = value;
        }

        /// <summary>
        /// When set to true, this resource will ignore the `group` attributes and allow users to be managed by
        /// `jfrog-project.Group` resource instead. Default to `true`.
        /// </summary>
        [Input("useProjectGroupResource")]
        public Input<bool>? UseProjectGroupResource { get; set; }

        /// <summary>
        /// When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by
        /// `jfrog-project.Repository` resource instead. Default to `true`.
        /// </summary>
        [Input("useProjectRepositoryResource")]
        public Input<bool>? UseProjectRepositoryResource { get; set; }

        /// <summary>
        /// When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `jfrog-project.Role`
        /// resource instead. Default to `true`.
        /// </summary>
        [Input("useProjectRoleResource")]
        public Input<bool>? UseProjectRoleResource { get; set; }

        /// <summary>
        /// When set to true, this resource will ignore the `member` attributes and allow users to be managed by
        /// `jfrog-project.User` resource instead. Default to `true`.
        /// </summary>
        [Input("useProjectUserResource")]
        public Input<bool>? UseProjectUserResource { get; set; }

        public ProjectState()
        {
        }
        public static new ProjectState Empty => new ProjectState();
    }
}
