// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JfrogProject
{
    /// <summary>
    /// Share a local or remote repository with all projects. Project Members of the target project are granted actions to the shared repository according to their Roles and Role actions assigned in the target Project. Requires a user assigned with the 'Administer the Platform' role.
    /// 
    /// -&gt;Only available for Artifactory 7.90.1 or later.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using JfrogProject = Pulumi.JfrogProject;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myprojectsharerepo = new JfrogProject.ShareRepositoryWithAll("myprojectsharerepo", new()
    ///     {
    ///         RepoKey = "myrepo-generic-local",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import jfrog-project:index/shareRepositoryWithAll:ShareRepositoryWithAll myprojectsharerepo repo_key
    /// ```
    /// </summary>
    [JfrogProjectResourceType("jfrog-project:index/shareRepositoryWithAll:ShareRepositoryWithAll")]
    public partial class ShareRepositoryWithAll : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
        /// </summary>
        [Output("readOnly")]
        public Output<bool> ReadOnly { get; private set; } = null!;

        /// <summary>
        /// The key of the repository.
        /// </summary>
        [Output("repoKey")]
        public Output<string> RepoKey { get; private set; } = null!;


        /// <summary>
        /// Create a ShareRepositoryWithAll resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ShareRepositoryWithAll(string name, ShareRepositoryWithAllArgs args, CustomResourceOptions? options = null)
            : base("jfrog-project:index/shareRepositoryWithAll:ShareRepositoryWithAll", name, args ?? new ShareRepositoryWithAllArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ShareRepositoryWithAll(string name, Input<string> id, ShareRepositoryWithAllState? state = null, CustomResourceOptions? options = null)
            : base("jfrog-project:index/shareRepositoryWithAll:ShareRepositoryWithAll", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ShareRepositoryWithAll resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ShareRepositoryWithAll Get(string name, Input<string> id, ShareRepositoryWithAllState? state = null, CustomResourceOptions? options = null)
        {
            return new ShareRepositoryWithAll(name, id, state, options);
        }
    }

    public sealed class ShareRepositoryWithAllArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
        /// </summary>
        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// The key of the repository.
        /// </summary>
        [Input("repoKey", required: true)]
        public Input<string> RepoKey { get; set; } = null!;

        public ShareRepositoryWithAllArgs()
        {
        }
        public static new ShareRepositoryWithAllArgs Empty => new ShareRepositoryWithAllArgs();
    }

    public sealed class ShareRepositoryWithAllState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
        /// </summary>
        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// The key of the repository.
        /// </summary>
        [Input("repoKey")]
        public Input<string>? RepoKey { get; set; }

        public ShareRepositoryWithAllState()
        {
        }
        public static new ShareRepositoryWithAllState Empty => new ShareRepositoryWithAllState();
    }
}
