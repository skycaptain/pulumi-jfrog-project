// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package jfrogproject

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/skycaptain/pulumi-jfrog-project/sdk/go/jfrog-project/internal"
)

// Provides an Artifactory project resource. This can be used to create and manage Artifactory project, maintain users/groups/roles/repos.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	jfrogproject "github.com/skycaptain/pulumi-jfrog-project/sdk/go/jfrog-project"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := jfrogproject.NewProject(ctx, "myproject", &jfrogproject.ProjectArgs{
//				AdminPrivileges: jfrogproject.ProjectAdminPrivilegeArray{
//					&jfrogproject.ProjectAdminPrivilegeArgs{
//						IndexResources:  pulumi.Bool(true),
//						ManageMembers:   pulumi.Bool(true),
//						ManageResources: pulumi.Bool(true),
//					},
//				},
//				BlockDeploymentsOnLimit: pulumi.Bool(false),
//				Description:             pulumi.String("My Project"),
//				DisplayName:             pulumi.String("My Project"),
//				EmailNotification:       pulumi.Bool(true),
//				Key:                     pulumi.String("myproj"),
//				MaxStorageInGibibytes:   pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import jfrog-project:index/project:Project myproject myproj
// ```
type Project struct {
	pulumi.CustomResourceState

	AdminPrivileges ProjectAdminPrivilegeArrayOutput `pulumi:"adminPrivileges"`
	// Block deployment of artifacts if storage quota is exceeded.
	BlockDeploymentsOnLimit pulumi.BoolOutput      `pulumi:"blockDeploymentsOnLimit"`
	Description             pulumi.StringPtrOutput `pulumi:"description"`
	// Also known as project name on the UI
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
	// blocker
	EmailNotification pulumi.BoolOutput `pulumi:"emailNotification"`
	// Project group. Element has one to one mapping with the [JFrog Project Groups
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
	//
	// Deprecated: Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `useProjectGroupResource` attribute to control which resource manages project roles.
	Groups ProjectGroupArrayOutput `pulumi:"groups"`
	// The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
	Key pulumi.StringOutput `pulumi:"key"`
	// Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
	// Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
	// for the API.
	MaxStorageInGibibytes pulumi.IntOutput `pulumi:"maxStorageInGibibytes"`
	// Member of the project. Element has one to one mapping with the [JFrog Project Users
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
	//
	// Deprecated: Replaced by `User` resource. This should not be used in combination with `User` resource. Use `useProjectUserResource` attribute to control which resource manages project roles.
	Members ProjectMemberArrayOutput `pulumi:"members"`
	// (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
	// `projectKey` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
	// `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
	// } ```
	//
	// Deprecated: Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `useProjectRepositoryResource` attribute to control which resource manages project repositories.
	Repos pulumi.StringArrayOutput `pulumi:"repos"`
	// Project role. Element has one to one mapping with the [JFrog Project Roles
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
	//
	// Deprecated: Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `useProjectRoleResource` attribute to control which resource manages project roles.
	Roles ProjectRoleArrayOutput `pulumi:"roles"`
	// When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
	// instead. Default to `true`.
	UseProjectGroupResource pulumi.BoolOutput `pulumi:"useProjectGroupResource"`
	// When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
	// resource instead. Default to `true`.
	UseProjectRepositoryResource pulumi.BoolOutput `pulumi:"useProjectRepositoryResource"`
	// When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
	// instead. Default to `true`.
	UseProjectRoleResource pulumi.BoolOutput `pulumi:"useProjectRoleResource"`
	// When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
	// instead. Default to `true`.
	UseProjectUserResource pulumi.BoolOutput `pulumi:"useProjectUserResource"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("jfrog-project:index/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("jfrog-project:index/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	AdminPrivileges []ProjectAdminPrivilege `pulumi:"adminPrivileges"`
	// Block deployment of artifacts if storage quota is exceeded.
	BlockDeploymentsOnLimit *bool   `pulumi:"blockDeploymentsOnLimit"`
	Description             *string `pulumi:"description"`
	// Also known as project name on the UI
	DisplayName *string `pulumi:"displayName"`
	// Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
	// blocker
	EmailNotification *bool `pulumi:"emailNotification"`
	// Project group. Element has one to one mapping with the [JFrog Project Groups
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
	//
	// Deprecated: Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `useProjectGroupResource` attribute to control which resource manages project roles.
	Groups []ProjectGroup `pulumi:"groups"`
	// The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
	Key *string `pulumi:"key"`
	// Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
	// Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
	// for the API.
	MaxStorageInGibibytes *int `pulumi:"maxStorageInGibibytes"`
	// Member of the project. Element has one to one mapping with the [JFrog Project Users
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
	//
	// Deprecated: Replaced by `User` resource. This should not be used in combination with `User` resource. Use `useProjectUserResource` attribute to control which resource manages project roles.
	Members []ProjectMember `pulumi:"members"`
	// (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
	// `projectKey` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
	// `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
	// } ```
	//
	// Deprecated: Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `useProjectRepositoryResource` attribute to control which resource manages project repositories.
	Repos []string `pulumi:"repos"`
	// Project role. Element has one to one mapping with the [JFrog Project Roles
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
	//
	// Deprecated: Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `useProjectRoleResource` attribute to control which resource manages project roles.
	Roles []ProjectRole `pulumi:"roles"`
	// When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
	// instead. Default to `true`.
	UseProjectGroupResource *bool `pulumi:"useProjectGroupResource"`
	// When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
	// resource instead. Default to `true`.
	UseProjectRepositoryResource *bool `pulumi:"useProjectRepositoryResource"`
	// When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
	// instead. Default to `true`.
	UseProjectRoleResource *bool `pulumi:"useProjectRoleResource"`
	// When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
	// instead. Default to `true`.
	UseProjectUserResource *bool `pulumi:"useProjectUserResource"`
}

type ProjectState struct {
	AdminPrivileges ProjectAdminPrivilegeArrayInput
	// Block deployment of artifacts if storage quota is exceeded.
	BlockDeploymentsOnLimit pulumi.BoolPtrInput
	Description             pulumi.StringPtrInput
	// Also known as project name on the UI
	DisplayName pulumi.StringPtrInput
	// Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
	// blocker
	EmailNotification pulumi.BoolPtrInput
	// Project group. Element has one to one mapping with the [JFrog Project Groups
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
	//
	// Deprecated: Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `useProjectGroupResource` attribute to control which resource manages project roles.
	Groups ProjectGroupArrayInput
	// The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
	Key pulumi.StringPtrInput
	// Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
	// Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
	// for the API.
	MaxStorageInGibibytes pulumi.IntPtrInput
	// Member of the project. Element has one to one mapping with the [JFrog Project Users
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
	//
	// Deprecated: Replaced by `User` resource. This should not be used in combination with `User` resource. Use `useProjectUserResource` attribute to control which resource manages project roles.
	Members ProjectMemberArrayInput
	// (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
	// `projectKey` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
	// `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
	// } ```
	//
	// Deprecated: Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `useProjectRepositoryResource` attribute to control which resource manages project repositories.
	Repos pulumi.StringArrayInput
	// Project role. Element has one to one mapping with the [JFrog Project Roles
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
	//
	// Deprecated: Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `useProjectRoleResource` attribute to control which resource manages project roles.
	Roles ProjectRoleArrayInput
	// When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
	// instead. Default to `true`.
	UseProjectGroupResource pulumi.BoolPtrInput
	// When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
	// resource instead. Default to `true`.
	UseProjectRepositoryResource pulumi.BoolPtrInput
	// When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
	// instead. Default to `true`.
	UseProjectRoleResource pulumi.BoolPtrInput
	// When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
	// instead. Default to `true`.
	UseProjectUserResource pulumi.BoolPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	AdminPrivileges []ProjectAdminPrivilege `pulumi:"adminPrivileges"`
	// Block deployment of artifacts if storage quota is exceeded.
	BlockDeploymentsOnLimit *bool   `pulumi:"blockDeploymentsOnLimit"`
	Description             *string `pulumi:"description"`
	// Also known as project name on the UI
	DisplayName string `pulumi:"displayName"`
	// Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
	// blocker
	EmailNotification *bool `pulumi:"emailNotification"`
	// Project group. Element has one to one mapping with the [JFrog Project Groups
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
	//
	// Deprecated: Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `useProjectGroupResource` attribute to control which resource manages project roles.
	Groups []ProjectGroup `pulumi:"groups"`
	// The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
	Key string `pulumi:"key"`
	// Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
	// Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
	// for the API.
	MaxStorageInGibibytes *int `pulumi:"maxStorageInGibibytes"`
	// Member of the project. Element has one to one mapping with the [JFrog Project Users
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
	//
	// Deprecated: Replaced by `User` resource. This should not be used in combination with `User` resource. Use `useProjectUserResource` attribute to control which resource manages project roles.
	Members []ProjectMember `pulumi:"members"`
	// (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
	// `projectKey` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
	// `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
	// } ```
	//
	// Deprecated: Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `useProjectRepositoryResource` attribute to control which resource manages project repositories.
	Repos []string `pulumi:"repos"`
	// Project role. Element has one to one mapping with the [JFrog Project Roles
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
	//
	// Deprecated: Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `useProjectRoleResource` attribute to control which resource manages project roles.
	Roles []ProjectRole `pulumi:"roles"`
	// When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
	// instead. Default to `true`.
	UseProjectGroupResource *bool `pulumi:"useProjectGroupResource"`
	// When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
	// resource instead. Default to `true`.
	UseProjectRepositoryResource *bool `pulumi:"useProjectRepositoryResource"`
	// When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
	// instead. Default to `true`.
	UseProjectRoleResource *bool `pulumi:"useProjectRoleResource"`
	// When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
	// instead. Default to `true`.
	UseProjectUserResource *bool `pulumi:"useProjectUserResource"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	AdminPrivileges ProjectAdminPrivilegeArrayInput
	// Block deployment of artifacts if storage quota is exceeded.
	BlockDeploymentsOnLimit pulumi.BoolPtrInput
	Description             pulumi.StringPtrInput
	// Also known as project name on the UI
	DisplayName pulumi.StringInput
	// Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
	// blocker
	EmailNotification pulumi.BoolPtrInput
	// Project group. Element has one to one mapping with the [JFrog Project Groups
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
	//
	// Deprecated: Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `useProjectGroupResource` attribute to control which resource manages project roles.
	Groups ProjectGroupArrayInput
	// The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
	Key pulumi.StringInput
	// Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
	// Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
	// for the API.
	MaxStorageInGibibytes pulumi.IntPtrInput
	// Member of the project. Element has one to one mapping with the [JFrog Project Users
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
	//
	// Deprecated: Replaced by `User` resource. This should not be used in combination with `User` resource. Use `useProjectUserResource` attribute to control which resource manages project roles.
	Members ProjectMemberArrayInput
	// (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
	// `projectKey` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
	// `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
	// } ```
	//
	// Deprecated: Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `useProjectRepositoryResource` attribute to control which resource manages project repositories.
	Repos pulumi.StringArrayInput
	// Project role. Element has one to one mapping with the [JFrog Project Roles
	// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
	//
	// Deprecated: Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `useProjectRoleResource` attribute to control which resource manages project roles.
	Roles ProjectRoleArrayInput
	// When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
	// instead. Default to `true`.
	UseProjectGroupResource pulumi.BoolPtrInput
	// When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
	// resource instead. Default to `true`.
	UseProjectRepositoryResource pulumi.BoolPtrInput
	// When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
	// instead. Default to `true`.
	UseProjectRoleResource pulumi.BoolPtrInput
	// When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
	// instead. Default to `true`.
	UseProjectUserResource pulumi.BoolPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

func (o ProjectOutput) AdminPrivileges() ProjectAdminPrivilegeArrayOutput {
	return o.ApplyT(func(v *Project) ProjectAdminPrivilegeArrayOutput { return v.AdminPrivileges }).(ProjectAdminPrivilegeArrayOutput)
}

// Block deployment of artifacts if storage quota is exceeded.
func (o ProjectOutput) BlockDeploymentsOnLimit() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.BlockDeploymentsOnLimit }).(pulumi.BoolOutput)
}

func (o ProjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Also known as project name on the UI
func (o ProjectOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
// blocker
func (o ProjectOutput) EmailNotification() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.EmailNotification }).(pulumi.BoolOutput)
}

// Project group. Element has one to one mapping with the [JFrog Project Groups
// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
//
// Deprecated: Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `useProjectGroupResource` attribute to control which resource manages project roles.
func (o ProjectOutput) Groups() ProjectGroupArrayOutput {
	return o.ApplyT(func(v *Project) ProjectGroupArrayOutput { return v.Groups }).(ProjectGroupArrayOutput)
}

// The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
func (o ProjectOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
// Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
// for the API.
func (o ProjectOutput) MaxStorageInGibibytes() pulumi.IntOutput {
	return o.ApplyT(func(v *Project) pulumi.IntOutput { return v.MaxStorageInGibibytes }).(pulumi.IntOutput)
}

// Member of the project. Element has one to one mapping with the [JFrog Project Users
// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
//
// Deprecated: Replaced by `User` resource. This should not be used in combination with `User` resource. Use `useProjectUserResource` attribute to control which resource manages project roles.
func (o ProjectOutput) Members() ProjectMemberArrayOutput {
	return o.ApplyT(func(v *Project) ProjectMemberArrayOutput { return v.Members }).(ProjectMemberArrayOutput)
}

// (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
// `projectKey` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
// `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
// } ```
//
// Deprecated: Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `useProjectRepositoryResource` attribute to control which resource manages project repositories.
func (o ProjectOutput) Repos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Project) pulumi.StringArrayOutput { return v.Repos }).(pulumi.StringArrayOutput)
}

// Project role. Element has one to one mapping with the [JFrog Project Roles
// API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
//
// Deprecated: Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `useProjectRoleResource` attribute to control which resource manages project roles.
func (o ProjectOutput) Roles() ProjectRoleArrayOutput {
	return o.ApplyT(func(v *Project) ProjectRoleArrayOutput { return v.Roles }).(ProjectRoleArrayOutput)
}

// When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
// instead. Default to `true`.
func (o ProjectOutput) UseProjectGroupResource() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.UseProjectGroupResource }).(pulumi.BoolOutput)
}

// When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
// resource instead. Default to `true`.
func (o ProjectOutput) UseProjectRepositoryResource() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.UseProjectRepositoryResource }).(pulumi.BoolOutput)
}

// When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
// instead. Default to `true`.
func (o ProjectOutput) UseProjectRoleResource() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.UseProjectRoleResource }).(pulumi.BoolOutput)
}

// When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
// instead. Default to `true`.
func (o ProjectOutput) UseProjectUserResource() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.UseProjectUserResource }).(pulumi.BoolOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
