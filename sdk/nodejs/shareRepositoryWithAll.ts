// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Share a local or remote repository with all projects. Project Members of the target project are granted actions to the shared repository according to their Roles and Role actions assigned in the target Project. Requires a user assigned with the 'Administer the Platform' role.
 *
 * ->Only available for Artifactory 7.90.1 or later.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as jfrog_project from "@pulumi/jfrog-project";
 *
 * const myprojectsharerepo = new jfrog_project.ShareRepositoryWithAll("myprojectsharerepo", {repoKey: "myrepo-generic-local"});
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import jfrog-project:index/shareRepositoryWithAll:ShareRepositoryWithAll myprojectsharerepo repo_key
 * ```
 */
export class ShareRepositoryWithAll extends pulumi.CustomResource {
    /**
     * Get an existing ShareRepositoryWithAll resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ShareRepositoryWithAllState, opts?: pulumi.CustomResourceOptions): ShareRepositoryWithAll {
        return new ShareRepositoryWithAll(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'jfrog-project:index/shareRepositoryWithAll:ShareRepositoryWithAll';

    /**
     * Returns true if the given object is an instance of ShareRepositoryWithAll.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ShareRepositoryWithAll {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ShareRepositoryWithAll.__pulumiType;
    }

    /**
     * Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
     */
    public readonly readOnly!: pulumi.Output<boolean>;
    /**
     * The key of the repository.
     */
    public readonly repoKey!: pulumi.Output<string>;

    /**
     * Create a ShareRepositoryWithAll resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ShareRepositoryWithAllArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ShareRepositoryWithAllArgs | ShareRepositoryWithAllState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ShareRepositoryWithAllState | undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["repoKey"] = state ? state.repoKey : undefined;
        } else {
            const args = argsOrState as ShareRepositoryWithAllArgs | undefined;
            if ((!args || args.repoKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoKey'");
            }
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["repoKey"] = args ? args.repoKey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ShareRepositoryWithAll.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ShareRepositoryWithAll resources.
 */
export interface ShareRepositoryWithAllState {
    /**
     * Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * The key of the repository.
     */
    repoKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ShareRepositoryWithAll resource.
 */
export interface ShareRepositoryWithAllArgs {
    /**
     * Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * The key of the repository.
     */
    repoKey: pulumi.Input<string>;
}
