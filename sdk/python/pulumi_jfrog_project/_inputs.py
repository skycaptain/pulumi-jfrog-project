# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ProjectAdminPrivilegeArgs',
    'ProjectGroupArgs',
    'ProjectMemberArgs',
    'ProjectRoleArgs',
]

@pulumi.input_type
class ProjectAdminPrivilegeArgs:
    def __init__(__self__, *,
                 index_resources: pulumi.Input[bool],
                 manage_members: pulumi.Input[bool],
                 manage_resources: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] index_resources: Enables a project admin to define the resources to be indexed by Xray
        :param pulumi.Input[bool] manage_members: Allows the Project Admin to manage Platform users/groups as project members with different roles.
        :param pulumi.Input[bool] manage_resources: Allows the Project Admin to manage resources - repositories, builds and Pipelines resources on the project level.
        """
        pulumi.set(__self__, "index_resources", index_resources)
        pulumi.set(__self__, "manage_members", manage_members)
        pulumi.set(__self__, "manage_resources", manage_resources)

    @property
    @pulumi.getter(name="indexResources")
    def index_resources(self) -> pulumi.Input[bool]:
        """
        Enables a project admin to define the resources to be indexed by Xray
        """
        return pulumi.get(self, "index_resources")

    @index_resources.setter
    def index_resources(self, value: pulumi.Input[bool]):
        pulumi.set(self, "index_resources", value)

    @property
    @pulumi.getter(name="manageMembers")
    def manage_members(self) -> pulumi.Input[bool]:
        """
        Allows the Project Admin to manage Platform users/groups as project members with different roles.
        """
        return pulumi.get(self, "manage_members")

    @manage_members.setter
    def manage_members(self, value: pulumi.Input[bool]):
        pulumi.set(self, "manage_members", value)

    @property
    @pulumi.getter(name="manageResources")
    def manage_resources(self) -> pulumi.Input[bool]:
        """
        Allows the Project Admin to manage resources - repositories, builds and Pipelines resources on the project level.
        """
        return pulumi.get(self, "manage_resources")

    @manage_resources.setter
    def manage_resources(self, value: pulumi.Input[bool]):
        pulumi.set(self, "manage_resources", value)


@pulumi.input_type
class ProjectGroupArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Must be existing Artifactory group
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: List of pre-defined Project or custom roles
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Must be existing Artifactory group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of pre-defined Project or custom roles
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class ProjectMemberArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Must be existing Artifactory user
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: List of pre-defined Project or custom roles
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Must be existing Artifactory user
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of pre-defined Project or custom roles
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class ProjectRoleArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 environments: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: List of pre-defined actions (READ*REPOSITORY, ANNOTATE*REPOSITORY, DEPLOY*CACHE*REPOSITORY, DELETE*OVERWRITE*REPOSITORY, MANAGE*XRAY*MD*REPOSITORY, READ*RELEASE*BUNDLE, ANNOTATE*RELEASE*BUNDLE, CREATE*RELEASE*BUNDLE, DISTRIBUTE*RELEASE*BUNDLE, DELETE*RELEASE*BUNDLE, MANAGE*XRAY*MD*RELEASE*BUNDLE, READ*BUILD, ANNOTATE*BUILD, DEPLOY*BUILD, DELETE*BUILD, MANAGE*XRAY*MD*BUILD, READ*SOURCES*PIPELINE, TRIGGER*PIPELINE, READ*INTEGRATIONS*PIPELINE, READ*POOLS*PIPELINE, MANAGE*INTEGRATIONS*PIPELINE, MANAGE*SOURCES*PIPELINE, MANAGE*POOLS*PIPELINE, TRIGGER*SECURITY, ISSUES*SECURITY, LICENCES*SECURITY, REPORTS*SECURITY, WATCHES*SECURITY, POLICIES*SECURITY, RULES*SECURITY, MANAGE*MEMBERS, MANAGE*RESOURCES)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A repository can be available in different environments. Members with roles defined in the set environment will have access to the repository. List of pre-defined environments (DEV, PROD)
        :param pulumi.Input[str] type: Type of role. Only "CUSTOM" is supported
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of pre-defined actions (READ*REPOSITORY, ANNOTATE*REPOSITORY, DEPLOY*CACHE*REPOSITORY, DELETE*OVERWRITE*REPOSITORY, MANAGE*XRAY*MD*REPOSITORY, READ*RELEASE*BUNDLE, ANNOTATE*RELEASE*BUNDLE, CREATE*RELEASE*BUNDLE, DISTRIBUTE*RELEASE*BUNDLE, DELETE*RELEASE*BUNDLE, MANAGE*XRAY*MD*RELEASE*BUNDLE, READ*BUILD, ANNOTATE*BUILD, DEPLOY*BUILD, DELETE*BUILD, MANAGE*XRAY*MD*BUILD, READ*SOURCES*PIPELINE, TRIGGER*PIPELINE, READ*INTEGRATIONS*PIPELINE, READ*POOLS*PIPELINE, MANAGE*INTEGRATIONS*PIPELINE, MANAGE*SOURCES*PIPELINE, MANAGE*POOLS*PIPELINE, TRIGGER*SECURITY, ISSUES*SECURITY, LICENCES*SECURITY, REPORTS*SECURITY, WATCHES*SECURITY, POLICIES*SECURITY, RULES*SECURITY, MANAGE*MEMBERS, MANAGE*RESOURCES)
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def environments(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A repository can be available in different environments. Members with roles defined in the set environment will have access to the repository. List of pre-defined environments (DEV, PROD)
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of role. Only "CUSTOM" is supported
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


