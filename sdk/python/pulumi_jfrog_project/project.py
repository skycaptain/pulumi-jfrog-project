# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProjectArgs', 'Project']

@pulumi.input_type
class ProjectArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 key: pulumi.Input[str],
                 admin_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAdminPrivilegeArgs']]]] = None,
                 block_deployments_on_limit: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email_notification: Optional[pulumi.Input[bool]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectGroupArgs']]]] = None,
                 max_storage_in_gibibytes: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectMemberArgs']]]] = None,
                 repos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectRoleArgs']]]] = None,
                 use_project_group_resource: Optional[pulumi.Input[bool]] = None,
                 use_project_repository_resource: Optional[pulumi.Input[bool]] = None,
                 use_project_role_resource: Optional[pulumi.Input[bool]] = None,
                 use_project_user_resource: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Project resource.
        :param pulumi.Input[str] display_name: Also known as project name on the UI
        :param pulumi.Input[str] key: The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
        :param pulumi.Input[bool] block_deployments_on_limit: Block deployment of artifacts if storage quota is exceeded.
        :param pulumi.Input[bool] email_notification: Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
               blocker
        :param pulumi.Input[Sequence[pulumi.Input['ProjectGroupArgs']]] groups: Project group. Element has one to one mapping with the [JFrog Project Groups
               API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
        :param pulumi.Input[int] max_storage_in_gibibytes: Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
               Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
               for the API.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectMemberArgs']]] members: Member of the project. Element has one to one mapping with the [JFrog Project Users
               API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repos: (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
               `project_key` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
               `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
               } ```
        :param pulumi.Input[Sequence[pulumi.Input['ProjectRoleArgs']]] roles: Project role. Element has one to one mapping with the [JFrog Project Roles
               API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
        :param pulumi.Input[bool] use_project_group_resource: When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
               instead. Default to `true`.
        :param pulumi.Input[bool] use_project_repository_resource: When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
               resource instead. Default to `true`.
        :param pulumi.Input[bool] use_project_role_resource: When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
               instead. Default to `true`.
        :param pulumi.Input[bool] use_project_user_resource: When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
               instead. Default to `true`.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "key", key)
        if admin_privileges is not None:
            pulumi.set(__self__, "admin_privileges", admin_privileges)
        if block_deployments_on_limit is not None:
            pulumi.set(__self__, "block_deployments_on_limit", block_deployments_on_limit)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email_notification is not None:
            pulumi.set(__self__, "email_notification", email_notification)
        if groups is not None:
            warnings.warn("""Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `use_project_group_resource` attribute to control which resource manages project roles.""", DeprecationWarning)
            pulumi.log.warn("""groups is deprecated: Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `use_project_group_resource` attribute to control which resource manages project roles.""")
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if max_storage_in_gibibytes is not None:
            pulumi.set(__self__, "max_storage_in_gibibytes", max_storage_in_gibibytes)
        if members is not None:
            warnings.warn("""Replaced by `User` resource. This should not be used in combination with `User` resource. Use `use_project_user_resource` attribute to control which resource manages project roles.""", DeprecationWarning)
            pulumi.log.warn("""members is deprecated: Replaced by `User` resource. This should not be used in combination with `User` resource. Use `use_project_user_resource` attribute to control which resource manages project roles.""")
        if members is not None:
            pulumi.set(__self__, "members", members)
        if repos is not None:
            warnings.warn("""Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `use_project_repository_resource` attribute to control which resource manages project repositories.""", DeprecationWarning)
            pulumi.log.warn("""repos is deprecated: Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `use_project_repository_resource` attribute to control which resource manages project repositories.""")
        if repos is not None:
            pulumi.set(__self__, "repos", repos)
        if roles is not None:
            warnings.warn("""Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `use_project_role_resource` attribute to control which resource manages project roles.""", DeprecationWarning)
            pulumi.log.warn("""roles is deprecated: Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `use_project_role_resource` attribute to control which resource manages project roles.""")
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if use_project_group_resource is not None:
            pulumi.set(__self__, "use_project_group_resource", use_project_group_resource)
        if use_project_repository_resource is not None:
            pulumi.set(__self__, "use_project_repository_resource", use_project_repository_resource)
        if use_project_role_resource is not None:
            pulumi.set(__self__, "use_project_role_resource", use_project_role_resource)
        if use_project_user_resource is not None:
            pulumi.set(__self__, "use_project_user_resource", use_project_user_resource)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        Also known as project name on the UI
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="adminPrivileges")
    def admin_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAdminPrivilegeArgs']]]]:
        return pulumi.get(self, "admin_privileges")

    @admin_privileges.setter
    def admin_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAdminPrivilegeArgs']]]]):
        pulumi.set(self, "admin_privileges", value)

    @property
    @pulumi.getter(name="blockDeploymentsOnLimit")
    def block_deployments_on_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Block deployment of artifacts if storage quota is exceeded.
        """
        return pulumi.get(self, "block_deployments_on_limit")

    @block_deployments_on_limit.setter
    def block_deployments_on_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_deployments_on_limit", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="emailNotification")
    def email_notification(self) -> Optional[pulumi.Input[bool]]:
        """
        Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
        blocker
        """
        return pulumi.get(self, "email_notification")

    @email_notification.setter
    def email_notification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_notification", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `use_project_group_resource` attribute to control which resource manages project roles.""")
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectGroupArgs']]]]:
        """
        Project group. Element has one to one mapping with the [JFrog Project Groups
        API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="maxStorageInGibibytes")
    def max_storage_in_gibibytes(self) -> Optional[pulumi.Input[int]]:
        """
        Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
        Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
        for the API.
        """
        return pulumi.get(self, "max_storage_in_gibibytes")

    @max_storage_in_gibibytes.setter
    def max_storage_in_gibibytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_storage_in_gibibytes", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Replaced by `User` resource. This should not be used in combination with `User` resource. Use `use_project_user_resource` attribute to control which resource manages project roles.""")
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectMemberArgs']]]]:
        """
        Member of the project. Element has one to one mapping with the [JFrog Project Users
        API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `use_project_repository_resource` attribute to control which resource manages project repositories.""")
    def repos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
        `project_key` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
        `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
        } ```
        """
        return pulumi.get(self, "repos")

    @repos.setter
    def repos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "repos", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `use_project_role_resource` attribute to control which resource manages project roles.""")
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectRoleArgs']]]]:
        """
        Project role. Element has one to one mapping with the [JFrog Project Roles
        API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectRoleArgs']]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="useProjectGroupResource")
    def use_project_group_resource(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
        instead. Default to `true`.
        """
        return pulumi.get(self, "use_project_group_resource")

    @use_project_group_resource.setter
    def use_project_group_resource(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_project_group_resource", value)

    @property
    @pulumi.getter(name="useProjectRepositoryResource")
    def use_project_repository_resource(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
        resource instead. Default to `true`.
        """
        return pulumi.get(self, "use_project_repository_resource")

    @use_project_repository_resource.setter
    def use_project_repository_resource(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_project_repository_resource", value)

    @property
    @pulumi.getter(name="useProjectRoleResource")
    def use_project_role_resource(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
        instead. Default to `true`.
        """
        return pulumi.get(self, "use_project_role_resource")

    @use_project_role_resource.setter
    def use_project_role_resource(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_project_role_resource", value)

    @property
    @pulumi.getter(name="useProjectUserResource")
    def use_project_user_resource(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
        instead. Default to `true`.
        """
        return pulumi.get(self, "use_project_user_resource")

    @use_project_user_resource.setter
    def use_project_user_resource(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_project_user_resource", value)


@pulumi.input_type
class _ProjectState:
    def __init__(__self__, *,
                 admin_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAdminPrivilegeArgs']]]] = None,
                 block_deployments_on_limit: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email_notification: Optional[pulumi.Input[bool]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectGroupArgs']]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 max_storage_in_gibibytes: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectMemberArgs']]]] = None,
                 repos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectRoleArgs']]]] = None,
                 use_project_group_resource: Optional[pulumi.Input[bool]] = None,
                 use_project_repository_resource: Optional[pulumi.Input[bool]] = None,
                 use_project_role_resource: Optional[pulumi.Input[bool]] = None,
                 use_project_user_resource: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Project resources.
        :param pulumi.Input[bool] block_deployments_on_limit: Block deployment of artifacts if storage quota is exceeded.
        :param pulumi.Input[str] display_name: Also known as project name on the UI
        :param pulumi.Input[bool] email_notification: Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
               blocker
        :param pulumi.Input[Sequence[pulumi.Input['ProjectGroupArgs']]] groups: Project group. Element has one to one mapping with the [JFrog Project Groups
               API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
        :param pulumi.Input[str] key: The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
        :param pulumi.Input[int] max_storage_in_gibibytes: Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
               Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
               for the API.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectMemberArgs']]] members: Member of the project. Element has one to one mapping with the [JFrog Project Users
               API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repos: (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
               `project_key` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
               `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
               } ```
        :param pulumi.Input[Sequence[pulumi.Input['ProjectRoleArgs']]] roles: Project role. Element has one to one mapping with the [JFrog Project Roles
               API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
        :param pulumi.Input[bool] use_project_group_resource: When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
               instead. Default to `true`.
        :param pulumi.Input[bool] use_project_repository_resource: When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
               resource instead. Default to `true`.
        :param pulumi.Input[bool] use_project_role_resource: When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
               instead. Default to `true`.
        :param pulumi.Input[bool] use_project_user_resource: When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
               instead. Default to `true`.
        """
        if admin_privileges is not None:
            pulumi.set(__self__, "admin_privileges", admin_privileges)
        if block_deployments_on_limit is not None:
            pulumi.set(__self__, "block_deployments_on_limit", block_deployments_on_limit)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email_notification is not None:
            pulumi.set(__self__, "email_notification", email_notification)
        if groups is not None:
            warnings.warn("""Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `use_project_group_resource` attribute to control which resource manages project roles.""", DeprecationWarning)
            pulumi.log.warn("""groups is deprecated: Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `use_project_group_resource` attribute to control which resource manages project roles.""")
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if max_storage_in_gibibytes is not None:
            pulumi.set(__self__, "max_storage_in_gibibytes", max_storage_in_gibibytes)
        if members is not None:
            warnings.warn("""Replaced by `User` resource. This should not be used in combination with `User` resource. Use `use_project_user_resource` attribute to control which resource manages project roles.""", DeprecationWarning)
            pulumi.log.warn("""members is deprecated: Replaced by `User` resource. This should not be used in combination with `User` resource. Use `use_project_user_resource` attribute to control which resource manages project roles.""")
        if members is not None:
            pulumi.set(__self__, "members", members)
        if repos is not None:
            warnings.warn("""Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `use_project_repository_resource` attribute to control which resource manages project repositories.""", DeprecationWarning)
            pulumi.log.warn("""repos is deprecated: Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `use_project_repository_resource` attribute to control which resource manages project repositories.""")
        if repos is not None:
            pulumi.set(__self__, "repos", repos)
        if roles is not None:
            warnings.warn("""Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `use_project_role_resource` attribute to control which resource manages project roles.""", DeprecationWarning)
            pulumi.log.warn("""roles is deprecated: Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `use_project_role_resource` attribute to control which resource manages project roles.""")
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if use_project_group_resource is not None:
            pulumi.set(__self__, "use_project_group_resource", use_project_group_resource)
        if use_project_repository_resource is not None:
            pulumi.set(__self__, "use_project_repository_resource", use_project_repository_resource)
        if use_project_role_resource is not None:
            pulumi.set(__self__, "use_project_role_resource", use_project_role_resource)
        if use_project_user_resource is not None:
            pulumi.set(__self__, "use_project_user_resource", use_project_user_resource)

    @property
    @pulumi.getter(name="adminPrivileges")
    def admin_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAdminPrivilegeArgs']]]]:
        return pulumi.get(self, "admin_privileges")

    @admin_privileges.setter
    def admin_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAdminPrivilegeArgs']]]]):
        pulumi.set(self, "admin_privileges", value)

    @property
    @pulumi.getter(name="blockDeploymentsOnLimit")
    def block_deployments_on_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Block deployment of artifacts if storage quota is exceeded.
        """
        return pulumi.get(self, "block_deployments_on_limit")

    @block_deployments_on_limit.setter
    def block_deployments_on_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_deployments_on_limit", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Also known as project name on the UI
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="emailNotification")
    def email_notification(self) -> Optional[pulumi.Input[bool]]:
        """
        Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
        blocker
        """
        return pulumi.get(self, "email_notification")

    @email_notification.setter
    def email_notification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_notification", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `use_project_group_resource` attribute to control which resource manages project roles.""")
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectGroupArgs']]]]:
        """
        Project group. Element has one to one mapping with the [JFrog Project Groups
        API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="maxStorageInGibibytes")
    def max_storage_in_gibibytes(self) -> Optional[pulumi.Input[int]]:
        """
        Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
        Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
        for the API.
        """
        return pulumi.get(self, "max_storage_in_gibibytes")

    @max_storage_in_gibibytes.setter
    def max_storage_in_gibibytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_storage_in_gibibytes", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Replaced by `User` resource. This should not be used in combination with `User` resource. Use `use_project_user_resource` attribute to control which resource manages project roles.""")
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectMemberArgs']]]]:
        """
        Member of the project. Element has one to one mapping with the [JFrog Project Users
        API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `use_project_repository_resource` attribute to control which resource manages project repositories.""")
    def repos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
        `project_key` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
        `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
        } ```
        """
        return pulumi.get(self, "repos")

    @repos.setter
    def repos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "repos", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `use_project_role_resource` attribute to control which resource manages project roles.""")
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectRoleArgs']]]]:
        """
        Project role. Element has one to one mapping with the [JFrog Project Roles
        API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectRoleArgs']]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="useProjectGroupResource")
    def use_project_group_resource(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
        instead. Default to `true`.
        """
        return pulumi.get(self, "use_project_group_resource")

    @use_project_group_resource.setter
    def use_project_group_resource(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_project_group_resource", value)

    @property
    @pulumi.getter(name="useProjectRepositoryResource")
    def use_project_repository_resource(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
        resource instead. Default to `true`.
        """
        return pulumi.get(self, "use_project_repository_resource")

    @use_project_repository_resource.setter
    def use_project_repository_resource(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_project_repository_resource", value)

    @property
    @pulumi.getter(name="useProjectRoleResource")
    def use_project_role_resource(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
        instead. Default to `true`.
        """
        return pulumi.get(self, "use_project_role_resource")

    @use_project_role_resource.setter
    def use_project_role_resource(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_project_role_resource", value)

    @property
    @pulumi.getter(name="useProjectUserResource")
    def use_project_user_resource(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
        instead. Default to `true`.
        """
        return pulumi.get(self, "use_project_user_resource")

    @use_project_user_resource.setter
    def use_project_user_resource(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_project_user_resource", value)


class Project(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectAdminPrivilegeArgs', 'ProjectAdminPrivilegeArgsDict']]]]] = None,
                 block_deployments_on_limit: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email_notification: Optional[pulumi.Input[bool]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectGroupArgs', 'ProjectGroupArgsDict']]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 max_storage_in_gibibytes: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectMemberArgs', 'ProjectMemberArgsDict']]]]] = None,
                 repos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectRoleArgs', 'ProjectRoleArgsDict']]]]] = None,
                 use_project_group_resource: Optional[pulumi.Input[bool]] = None,
                 use_project_repository_resource: Optional[pulumi.Input[bool]] = None,
                 use_project_role_resource: Optional[pulumi.Input[bool]] = None,
                 use_project_user_resource: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides an Artifactory project resource. This can be used to create and manage Artifactory project, maintain users/groups/roles/repos.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_jfrog_project as jfrog_project

        myproject = jfrog_project.Project("myproject",
            admin_privileges=[{
                "index_resources": True,
                "manage_members": True,
                "manage_resources": True,
            }],
            block_deployments_on_limit=False,
            description="My Project",
            display_name="My Project",
            email_notification=True,
            key="myproj",
            max_storage_in_gibibytes=10)
        ```

        ## Import

        ```sh
        $ pulumi import jfrog-project:index/project:Project myproject myproj
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] block_deployments_on_limit: Block deployment of artifacts if storage quota is exceeded.
        :param pulumi.Input[str] display_name: Also known as project name on the UI
        :param pulumi.Input[bool] email_notification: Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
               blocker
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectGroupArgs', 'ProjectGroupArgsDict']]]] groups: Project group. Element has one to one mapping with the [JFrog Project Groups
               API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
        :param pulumi.Input[str] key: The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
        :param pulumi.Input[int] max_storage_in_gibibytes: Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
               Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
               for the API.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectMemberArgs', 'ProjectMemberArgsDict']]]] members: Member of the project. Element has one to one mapping with the [JFrog Project Users
               API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repos: (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
               `project_key` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
               `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
               } ```
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectRoleArgs', 'ProjectRoleArgsDict']]]] roles: Project role. Element has one to one mapping with the [JFrog Project Roles
               API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
        :param pulumi.Input[bool] use_project_group_resource: When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
               instead. Default to `true`.
        :param pulumi.Input[bool] use_project_repository_resource: When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
               resource instead. Default to `true`.
        :param pulumi.Input[bool] use_project_role_resource: When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
               instead. Default to `true`.
        :param pulumi.Input[bool] use_project_user_resource: When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
               instead. Default to `true`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an Artifactory project resource. This can be used to create and manage Artifactory project, maintain users/groups/roles/repos.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_jfrog_project as jfrog_project

        myproject = jfrog_project.Project("myproject",
            admin_privileges=[{
                "index_resources": True,
                "manage_members": True,
                "manage_resources": True,
            }],
            block_deployments_on_limit=False,
            description="My Project",
            display_name="My Project",
            email_notification=True,
            key="myproj",
            max_storage_in_gibibytes=10)
        ```

        ## Import

        ```sh
        $ pulumi import jfrog-project:index/project:Project myproject myproj
        ```

        :param str resource_name: The name of the resource.
        :param ProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectAdminPrivilegeArgs', 'ProjectAdminPrivilegeArgsDict']]]]] = None,
                 block_deployments_on_limit: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email_notification: Optional[pulumi.Input[bool]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectGroupArgs', 'ProjectGroupArgsDict']]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 max_storage_in_gibibytes: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectMemberArgs', 'ProjectMemberArgsDict']]]]] = None,
                 repos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectRoleArgs', 'ProjectRoleArgsDict']]]]] = None,
                 use_project_group_resource: Optional[pulumi.Input[bool]] = None,
                 use_project_repository_resource: Optional[pulumi.Input[bool]] = None,
                 use_project_role_resource: Optional[pulumi.Input[bool]] = None,
                 use_project_user_resource: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectArgs.__new__(ProjectArgs)

            __props__.__dict__["admin_privileges"] = admin_privileges
            __props__.__dict__["block_deployments_on_limit"] = block_deployments_on_limit
            __props__.__dict__["description"] = description
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["email_notification"] = email_notification
            __props__.__dict__["groups"] = groups
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["max_storage_in_gibibytes"] = max_storage_in_gibibytes
            __props__.__dict__["members"] = members
            __props__.__dict__["repos"] = repos
            __props__.__dict__["roles"] = roles
            __props__.__dict__["use_project_group_resource"] = use_project_group_resource
            __props__.__dict__["use_project_repository_resource"] = use_project_repository_resource
            __props__.__dict__["use_project_role_resource"] = use_project_role_resource
            __props__.__dict__["use_project_user_resource"] = use_project_user_resource
        super(Project, __self__).__init__(
            'jfrog-project:index/project:Project',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectAdminPrivilegeArgs', 'ProjectAdminPrivilegeArgsDict']]]]] = None,
            block_deployments_on_limit: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            email_notification: Optional[pulumi.Input[bool]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectGroupArgs', 'ProjectGroupArgsDict']]]]] = None,
            key: Optional[pulumi.Input[str]] = None,
            max_storage_in_gibibytes: Optional[pulumi.Input[int]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectMemberArgs', 'ProjectMemberArgsDict']]]]] = None,
            repos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectRoleArgs', 'ProjectRoleArgsDict']]]]] = None,
            use_project_group_resource: Optional[pulumi.Input[bool]] = None,
            use_project_repository_resource: Optional[pulumi.Input[bool]] = None,
            use_project_role_resource: Optional[pulumi.Input[bool]] = None,
            use_project_user_resource: Optional[pulumi.Input[bool]] = None) -> 'Project':
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] block_deployments_on_limit: Block deployment of artifacts if storage quota is exceeded.
        :param pulumi.Input[str] display_name: Also known as project name on the UI
        :param pulumi.Input[bool] email_notification: Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
               blocker
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectGroupArgs', 'ProjectGroupArgsDict']]]] groups: Project group. Element has one to one mapping with the [JFrog Project Groups
               API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
        :param pulumi.Input[str] key: The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
        :param pulumi.Input[int] max_storage_in_gibibytes: Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
               Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
               for the API.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectMemberArgs', 'ProjectMemberArgsDict']]]] members: Member of the project. Element has one to one mapping with the [JFrog Project Users
               API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repos: (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
               `project_key` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
               `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
               } ```
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectRoleArgs', 'ProjectRoleArgsDict']]]] roles: Project role. Element has one to one mapping with the [JFrog Project Roles
               API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
        :param pulumi.Input[bool] use_project_group_resource: When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
               instead. Default to `true`.
        :param pulumi.Input[bool] use_project_repository_resource: When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
               resource instead. Default to `true`.
        :param pulumi.Input[bool] use_project_role_resource: When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
               instead. Default to `true`.
        :param pulumi.Input[bool] use_project_user_resource: When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
               instead. Default to `true`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectState.__new__(_ProjectState)

        __props__.__dict__["admin_privileges"] = admin_privileges
        __props__.__dict__["block_deployments_on_limit"] = block_deployments_on_limit
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["email_notification"] = email_notification
        __props__.__dict__["groups"] = groups
        __props__.__dict__["key"] = key
        __props__.__dict__["max_storage_in_gibibytes"] = max_storage_in_gibibytes
        __props__.__dict__["members"] = members
        __props__.__dict__["repos"] = repos
        __props__.__dict__["roles"] = roles
        __props__.__dict__["use_project_group_resource"] = use_project_group_resource
        __props__.__dict__["use_project_repository_resource"] = use_project_repository_resource
        __props__.__dict__["use_project_role_resource"] = use_project_role_resource
        __props__.__dict__["use_project_user_resource"] = use_project_user_resource
        return Project(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminPrivileges")
    def admin_privileges(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectAdminPrivilege']]]:
        return pulumi.get(self, "admin_privileges")

    @property
    @pulumi.getter(name="blockDeploymentsOnLimit")
    def block_deployments_on_limit(self) -> pulumi.Output[bool]:
        """
        Block deployment of artifacts if storage quota is exceeded.
        """
        return pulumi.get(self, "block_deployments_on_limit")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        Also known as project name on the UI
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emailNotification")
    def email_notification(self) -> pulumi.Output[bool]:
        """
        Alerts will be sent when reaching 75% and 95% of the storage quota. This serves as a notification only and is not a
        blocker
        """
        return pulumi.get(self, "email_notification")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Replaced by `Group` resource. This should not be used in combination with `Group` resource. Use `use_project_group_resource` attribute to control which resource manages project roles.""")
    def groups(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectGroup']]]:
        """
        Project group. Element has one to one mapping with the [JFrog Project Groups
        API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateGroupinProject)
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        The Project Key is added as a prefix to resources created within a Project. This field is mandatory and supports only 2 - 32 lowercase alphanumeric and hyphen characters. Must begin with a letter. For example: `us1a-test`.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="maxStorageInGibibytes")
    def max_storage_in_gibibytes(self) -> pulumi.Output[int]:
        """
        Storage quota in GiB. Must be 1 or larger. Set to -1 for unlimited storage. This is translated to binary bytes for
        Artifactory API. So for a 1TB quota, this should be set to 1024 (vs 1000) which will translate to 1099511627776 bytes
        for the API.
        """
        return pulumi.get(self, "max_storage_in_gibibytes")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Replaced by `User` resource. This should not be used in combination with `User` resource. Use `use_project_user_resource` attribute to control which resource manages project roles.""")
    def members(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectMember']]]:
        """
        Member of the project. Element has one to one mapping with the [JFrog Project Users
        API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-UpdateUserinProject).
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Replaced by `Repository` resource. This should not be used in combination with `Repository` resource. Use `use_project_repository_resource` attribute to control which resource manages project repositories.""")
    def repos(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        (Optional) List of existing repo keys to be assigned to the project. If you wish to use the alternate method of setting
        `project_key` attribute in each `artifactory_*_repository` resource in the `artifactory` provider, you will need to use
        `lifecycle.ignore_changes` in the `Project` resource to avoid state drift. ```hcl lifecycle { ignore_changes = [ repos ]
        } ```
        """
        return pulumi.get(self, "repos")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Replaced by `Role` resource. This should not be used in combination with `Role` resource. Use `use_project_role_resource` attribute to control which resource manages project roles.""")
    def roles(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectRole']]]:
        """
        Project role. Element has one to one mapping with the [JFrog Project Roles
        API](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-AddaNewRole)
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="useProjectGroupResource")
    def use_project_group_resource(self) -> pulumi.Output[bool]:
        """
        When set to true, this resource will ignore the `group` attributes and allow users to be managed by `Group` resource
        instead. Default to `true`.
        """
        return pulumi.get(self, "use_project_group_resource")

    @property
    @pulumi.getter(name="useProjectRepositoryResource")
    def use_project_repository_resource(self) -> pulumi.Output[bool]:
        """
        When set to true, this resource will ignore the `repos` attributes and allow repository to be managed by `Repository`
        resource instead. Default to `true`.
        """
        return pulumi.get(self, "use_project_repository_resource")

    @property
    @pulumi.getter(name="useProjectRoleResource")
    def use_project_role_resource(self) -> pulumi.Output[bool]:
        """
        When set to true, this resource will ignore the `roles` attributes and allow roles to be managed by `Role` resource
        instead. Default to `true`.
        """
        return pulumi.get(self, "use_project_role_resource")

    @property
    @pulumi.getter(name="useProjectUserResource")
    def use_project_user_resource(self) -> pulumi.Output[bool]:
        """
        When set to true, this resource will ignore the `member` attributes and allow users to be managed by `User` resource
        instead. Default to `true`.
        """
        return pulumi.get(self, "use_project_user_resource")

