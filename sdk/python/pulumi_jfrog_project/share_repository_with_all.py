# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ShareRepositoryWithAllArgs', 'ShareRepositoryWithAll']

@pulumi.input_type
class ShareRepositoryWithAllArgs:
    def __init__(__self__, *,
                 repo_key: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ShareRepositoryWithAll resource.
        :param pulumi.Input[str] repo_key: The key of the repository.
        :param pulumi.Input[bool] read_only: Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
        """
        pulumi.set(__self__, "repo_key", repo_key)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="repoKey")
    def repo_key(self) -> pulumi.Input[str]:
        """
        The key of the repository.
        """
        return pulumi.get(self, "repo_key")

    @repo_key.setter
    def repo_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo_key", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class _ShareRepositoryWithAllState:
    def __init__(__self__, *,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 repo_key: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ShareRepositoryWithAll resources.
        :param pulumi.Input[bool] read_only: Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
        :param pulumi.Input[str] repo_key: The key of the repository.
        """
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if repo_key is not None:
            pulumi.set(__self__, "repo_key", repo_key)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="repoKey")
    def repo_key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the repository.
        """
        return pulumi.get(self, "repo_key")

    @repo_key.setter
    def repo_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_key", value)


class ShareRepositoryWithAll(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 repo_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Share a local or remote repository with all projects. Project Members of the target project are granted actions to the shared repository according to their Roles and Role actions assigned in the target Project. Requires a user assigned with the 'Administer the Platform' role.

        ->Only available for Artifactory 7.90.1 or later.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_jfrog_project as jfrog_project

        myprojectsharerepo = jfrog_project.ShareRepositoryWithAll("myprojectsharerepo", repo_key="myrepo-generic-local")
        ```

        ## Import

        ```sh
        $ pulumi import jfrog-project:index/shareRepositoryWithAll:ShareRepositoryWithAll myprojectsharerepo repo_key
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] read_only: Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
        :param pulumi.Input[str] repo_key: The key of the repository.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ShareRepositoryWithAllArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Share a local or remote repository with all projects. Project Members of the target project are granted actions to the shared repository according to their Roles and Role actions assigned in the target Project. Requires a user assigned with the 'Administer the Platform' role.

        ->Only available for Artifactory 7.90.1 or later.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_jfrog_project as jfrog_project

        myprojectsharerepo = jfrog_project.ShareRepositoryWithAll("myprojectsharerepo", repo_key="myrepo-generic-local")
        ```

        ## Import

        ```sh
        $ pulumi import jfrog-project:index/shareRepositoryWithAll:ShareRepositoryWithAll myprojectsharerepo repo_key
        ```

        :param str resource_name: The name of the resource.
        :param ShareRepositoryWithAllArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ShareRepositoryWithAllArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 repo_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ShareRepositoryWithAllArgs.__new__(ShareRepositoryWithAllArgs)

            __props__.__dict__["read_only"] = read_only
            if repo_key is None and not opts.urn:
                raise TypeError("Missing required property 'repo_key'")
            __props__.__dict__["repo_key"] = repo_key
        super(ShareRepositoryWithAll, __self__).__init__(
            'jfrog-project:index/shareRepositoryWithAll:ShareRepositoryWithAll',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            read_only: Optional[pulumi.Input[bool]] = None,
            repo_key: Optional[pulumi.Input[str]] = None) -> 'ShareRepositoryWithAll':
        """
        Get an existing ShareRepositoryWithAll resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] read_only: Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
        :param pulumi.Input[str] repo_key: The key of the repository.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ShareRepositoryWithAllState.__new__(_ShareRepositoryWithAllState)

        __props__.__dict__["read_only"] = read_only
        __props__.__dict__["repo_key"] = repo_key
        return ShareRepositoryWithAll(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> pulumi.Output[bool]:
        """
        Share repository with a Project in Read-Only mode to avoid any changes or modifications of the shared content.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="repoKey")
    def repo_key(self) -> pulumi.Output[str]:
        """
        The key of the repository.
        """
        return pulumi.get(self, "repo_key")

